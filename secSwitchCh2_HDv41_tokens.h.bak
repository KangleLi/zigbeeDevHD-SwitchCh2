// This file is generated by Simplicity Studio.  Please do not edit manually.
//
//

// This file contains the tokens for attributes stored in flash


// Identifier tags for tokens
// Creator for attribute: ZCL version, singleton.
#define CREATOR_VERSION_SINGLETON 0xB000
#define NVM3KEY_VERSION_SINGLETON ( NVM3KEY_DOMAIN_ZIGBEE | 0xB000 )
// Creator for attribute: application version, singleton.
#define CREATOR_APPLICATION_VERSION_SINGLETON 0xB001
#define NVM3KEY_APPLICATION_VERSION_SINGLETON ( NVM3KEY_DOMAIN_ZIGBEE | 0xB001 )
// Creator for attribute: stack version, singleton.
#define CREATOR_STACK_VERSION_SINGLETON 0xB002
#define NVM3KEY_STACK_VERSION_SINGLETON ( NVM3KEY_DOMAIN_ZIGBEE | 0xB002 )
// Creator for attribute: hardware version, singleton.
#define CREATOR_HW_VERSION_SINGLETON 0xB003
#define NVM3KEY_HW_VERSION_SINGLETON ( NVM3KEY_DOMAIN_ZIGBEE | 0xB003 )
// Creator for attribute: manufacturer name, singleton.
#define CREATOR_MANUFACTURER_NAME_SINGLETON 0xB004
#define NVM3KEY_MANUFACTURER_NAME_SINGLETON ( NVM3KEY_DOMAIN_ZIGBEE | 0xB004 )
// Creator for attribute: model identifier, singleton.
#define CREATOR_MODEL_IDENTIFIER_SINGLETON 0xB005
#define NVM3KEY_MODEL_IDENTIFIER_SINGLETON ( NVM3KEY_DOMAIN_ZIGBEE | 0xB005 )
// Creator for attribute: date code, singleton.
#define CREATOR_DATE_CODE_SINGLETON 0xB006
#define NVM3KEY_DATE_CODE_SINGLETON ( NVM3KEY_DOMAIN_ZIGBEE | 0xB006 )
// Creator for attribute: power source, singleton.
#define CREATOR_POWER_SOURCE_SINGLETON 0xB007
#define NVM3KEY_POWER_SOURCE_SINGLETON ( NVM3KEY_DOMAIN_ZIGBEE | 0xB007 )
// Creator for attribute: generic device class, singleton.
#define CREATOR_GENERIC_DEVICE_CLASS_SINGLETON 0xB008
#define NVM3KEY_GENERIC_DEVICE_CLASS_SINGLETON ( NVM3KEY_DOMAIN_ZIGBEE | 0xB008 )
// Creator for attribute: generic device type, singleton.
#define CREATOR_GENERIC_DEVICE_TYPE_SINGLETON 0xB009
#define NVM3KEY_GENERIC_DEVICE_TYPE_SINGLETON ( NVM3KEY_DOMAIN_ZIGBEE | 0xB009 )
// Creator for attribute: on/off, endpoint: 1
#define CREATOR_ON_OFF_1 0xB00D
#define NVM3KEY_ON_OFF_1 ( NVM3KEY_DOMAIN_ZIGBEE | 0xB00D )
// Creator for attribute: Indicator Mode, singleton.
#define CREATOR_INDICATOR_MODE_SINGLETON 0xB00F
#define NVM3KEY_INDICATOR_MODE_SINGLETON ( NVM3KEY_DOMAIN_ZIGBEE | 0xB00F )
// Creator for attribute: on/off, endpoint: 2
#define CREATOR_ON_OFF_2 0xB010
#define NVM3KEY_ON_OFF_2 ( NVM3KEY_DOMAIN_ZIGBEE | 0xB010 )
// Creator for attribute: on/off, endpoint: 3
#define CREATOR_ON_OFF_3 0xB012
#define NVM3KEY_ON_OFF_3 ( NVM3KEY_DOMAIN_ZIGBEE | 0xB012 )
// Creator for attribute: on/off, endpoint: 4
#define CREATOR_ON_OFF_4 0xB014
#define NVM3KEY_ON_OFF_4 ( NVM3KEY_DOMAIN_ZIGBEE | 0xB014 )


// Types for the tokens
#ifdef DEFINETYPES
typedef uint8_t  tokType_on_off;
typedef uint8_t  tokType_current_level;
typedef uint16_t  tokType_start_up_color_temperature_mireds;
typedef uint8_t  tokType_version;
typedef uint8_t  tokType_application_version;
typedef uint8_t  tokType_stack_version;
typedef uint8_t  tokType_hw_version;
typedef uint8_t  tokType_manufacturer_name[33];
typedef uint8_t  tokType_model_identifier[33];
typedef uint8_t  tokType_date_code[17];
typedef uint8_t  tokType_power_source;
typedef uint8_t  tokType_generic_device_class;
typedef uint8_t  tokType_generic_device_type;
typedef uint8_t  tokType_indicator_mode;
#endif // DEFINETYPES


// Actual token definitions
#ifdef DEFINETOKENS
DEFINE_BASIC_TOKEN(VERSION_SINGLETON, tokType_version, 0x03)
DEFINE_BASIC_TOKEN(APPLICATION_VERSION_SINGLETON, tokType_application_version, 0x41)
DEFINE_BASIC_TOKEN(STACK_VERSION_SINGLETON, tokType_stack_version, 0x00)
DEFINE_BASIC_TOKEN(HW_VERSION_SINGLETON, tokType_hw_version, 0x00)
DEFINE_BASIC_TOKEN(MANUFACTURER_NAME_SINGLETON, tokType_manufacturer_name, {3,'S','E','C',0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0})
DEFINE_BASIC_TOKEN(MODEL_IDENTIFIER_SINGLETON, tokType_model_identifier, {15,'S','2','1','0','0','-','E','8','2','3','-','1','0','0','4',0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0})
DEFINE_BASIC_TOKEN(DATE_CODE_SINGLETON, tokType_date_code, {9,'2','0','1','9','.','9','.','1','1',0,0,0,0,0,0,0})
DEFINE_BASIC_TOKEN(POWER_SOURCE_SINGLETON, tokType_power_source, 0x01)
DEFINE_BASIC_TOKEN(GENERIC_DEVICE_CLASS_SINGLETON, tokType_generic_device_class, 0xFF)
DEFINE_BASIC_TOKEN(GENERIC_DEVICE_TYPE_SINGLETON, tokType_generic_device_type, 0xFF)
DEFINE_BASIC_TOKEN(ON_OFF_1, tokType_on_off, 0x00)
DEFINE_BASIC_TOKEN(INDICATOR_MODE_SINGLETON, tokType_indicator_mode, 0x01)
DEFINE_BASIC_TOKEN(ON_OFF_2, tokType_on_off, 0x00)
DEFINE_BASIC_TOKEN(ON_OFF_3, tokType_on_off, 0x00)
DEFINE_BASIC_TOKEN(ON_OFF_4, tokType_on_off, 0x00)
#endif // DEFINETOKENS


// Macro snippet that loads all the attributes from tokens
#define GENERATED_TOKEN_LOADER(endpoint) do {\
  uint8_t ptr[33]; \
  uint8_t curNetwork = emberGetCurrentNetwork(); \
  uint8_t epNetwork; \
  halCommonGetToken((tokType_version *)ptr, TOKEN_VERSION_SINGLETON); \
  emberAfWriteServerAttribute(1, ZCL_BASIC_CLUSTER_ID, ZCL_VERSION_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT8U_ATTRIBUTE_TYPE); \
  halCommonGetToken((tokType_application_version *)ptr, TOKEN_APPLICATION_VERSION_SINGLETON); \
  emberAfWriteServerAttribute(1, ZCL_BASIC_CLUSTER_ID, ZCL_APPLICATION_VERSION_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT8U_ATTRIBUTE_TYPE); \
  halCommonGetToken((tokType_stack_version *)ptr, TOKEN_STACK_VERSION_SINGLETON); \
  emberAfWriteServerAttribute(1, ZCL_BASIC_CLUSTER_ID, ZCL_STACK_VERSION_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT8U_ATTRIBUTE_TYPE); \
  halCommonGetToken((tokType_hw_version *)ptr, TOKEN_HW_VERSION_SINGLETON); \
  emberAfWriteServerAttribute(1, ZCL_BASIC_CLUSTER_ID, ZCL_HW_VERSION_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT8U_ATTRIBUTE_TYPE); \
  halCommonGetToken((tokType_manufacturer_name *)ptr, TOKEN_MANUFACTURER_NAME_SINGLETON); \
  emberAfWriteServerAttribute(1, ZCL_BASIC_CLUSTER_ID, ZCL_MANUFACTURER_NAME_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_CHAR_STRING_ATTRIBUTE_TYPE); \
  halCommonGetToken((tokType_model_identifier *)ptr, TOKEN_MODEL_IDENTIFIER_SINGLETON); \
  emberAfWriteServerAttribute(1, ZCL_BASIC_CLUSTER_ID, ZCL_MODEL_IDENTIFIER_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_CHAR_STRING_ATTRIBUTE_TYPE); \
  halCommonGetToken((tokType_date_code *)ptr, TOKEN_DATE_CODE_SINGLETON); \
  emberAfWriteServerAttribute(1, ZCL_BASIC_CLUSTER_ID, ZCL_DATE_CODE_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_CHAR_STRING_ATTRIBUTE_TYPE); \
  halCommonGetToken((tokType_power_source *)ptr, TOKEN_POWER_SOURCE_SINGLETON); \
  emberAfWriteServerAttribute(1, ZCL_BASIC_CLUSTER_ID, ZCL_POWER_SOURCE_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_ENUM8_ATTRIBUTE_TYPE); \
  halCommonGetToken((tokType_generic_device_class *)ptr, TOKEN_GENERIC_DEVICE_CLASS_SINGLETON); \
  emberAfWriteServerAttribute(1, ZCL_BASIC_CLUSTER_ID, ZCL_GENERIC_DEVICE_CLASS_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_ENUM8_ATTRIBUTE_TYPE); \
  halCommonGetToken((tokType_generic_device_type *)ptr, TOKEN_GENERIC_DEVICE_TYPE_SINGLETON); \
  emberAfWriteServerAttribute(1, ZCL_BASIC_CLUSTER_ID, ZCL_GENERIC_DEVICE_TYPE_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_ENUM8_ATTRIBUTE_TYPE); \
  halCommonGetToken((tokType_indicator_mode *)ptr, TOKEN_INDICATOR_MODE_SINGLETON); \
  emberAfWriteServerAttribute(1, ZCL_ON_OFF_CLUSTER_ID, ZCL_INDICATOR_MODE_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_ENUM8_ATTRIBUTE_TYPE); \
  epNetwork = emberAfNetworkIndexFromEndpoint(1); \
  if((endpoint) == 1 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_on_off *)ptr, TOKEN_ON_OFF_1); \
    emberAfWriteServerAttribute(1, ZCL_ON_OFF_CLUSTER_ID, ZCL_ON_OFF_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_BOOLEAN_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(2); \
  if((endpoint) == 2 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_on_off *)ptr, TOKEN_ON_OFF_2); \
    emberAfWriteServerAttribute(2, ZCL_ON_OFF_CLUSTER_ID, ZCL_ON_OFF_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_BOOLEAN_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(3); \
  if((endpoint) == 3 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_on_off *)ptr, TOKEN_ON_OFF_3); \
    emberAfWriteServerAttribute(3, ZCL_ON_OFF_CLUSTER_ID, ZCL_ON_OFF_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_BOOLEAN_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(4); \
  if((endpoint) == 4 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_on_off *)ptr, TOKEN_ON_OFF_4); \
    emberAfWriteServerAttribute(4, ZCL_ON_OFF_CLUSTER_ID, ZCL_ON_OFF_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_BOOLEAN_ATTRIBUTE_TYPE); \
  } \
} while(false)


// Macro snippet that saves the attribute to token
#define GENERATED_TOKEN_SAVER do {\
  uint8_t allZeroData[33]; \
  MEMSET(allZeroData, 0, 33); \
  if ( data == NULL ) data = allZeroData; \
  if ( clusterId == 0x00 ) { \
    if ( metadata->attributeId == 0x0000 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
      halCommonSetToken(TOKEN_VERSION_SINGLETON, data); \
    if ( metadata->attributeId == 0x0001 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
      halCommonSetToken(TOKEN_APPLICATION_VERSION_SINGLETON, data); \
    if ( metadata->attributeId == 0x0002 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
      halCommonSetToken(TOKEN_STACK_VERSION_SINGLETON, data); \
    if ( metadata->attributeId == 0x0003 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
      halCommonSetToken(TOKEN_HW_VERSION_SINGLETON, data); \
    if ( metadata->attributeId == 0x0004 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
      halCommonSetToken(TOKEN_MANUFACTURER_NAME_SINGLETON, data); \
    if ( metadata->attributeId == 0x0005 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
      halCommonSetToken(TOKEN_MODEL_IDENTIFIER_SINGLETON, data); \
    if ( metadata->attributeId == 0x0006 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
      halCommonSetToken(TOKEN_DATE_CODE_SINGLETON, data); \
    if ( metadata->attributeId == 0x0007 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
      halCommonSetToken(TOKEN_POWER_SOURCE_SINGLETON, data); \
    if ( metadata->attributeId == 0x0008 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
      halCommonSetToken(TOKEN_GENERIC_DEVICE_CLASS_SINGLETON, data); \
    if ( metadata->attributeId == 0x0009 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
      halCommonSetToken(TOKEN_GENERIC_DEVICE_TYPE_SINGLETON, data); \
  } else if ( clusterId == 0x06 ) { \
    if ( metadata->attributeId == 0x8001 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
      halCommonSetToken(TOKEN_INDICATOR_MODE_SINGLETON, data); \
  }\
  if ( endpoint == 1 ) { \
    if ( clusterId == 0x06 ) { \
      if ( metadata->attributeId == 0x0000 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_ON_OFF_1, data); \
    } \
  } else if ( endpoint == 2) { \
    if ( clusterId == 0x06 ) { \
      if ( metadata->attributeId == 0x0000 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_ON_OFF_2, data); \
    } \
  } else if ( endpoint == 3) { \
    if ( clusterId == 0x06 ) { \
      if ( metadata->attributeId == 0x0000 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_ON_OFF_3, data); \
    } \
  } else if ( endpoint == 4) { \
    if ( clusterId == 0x06 ) { \
      if ( metadata->attributeId == 0x0000 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_ON_OFF_4, data); \
    } \
  } \
} while(false)


